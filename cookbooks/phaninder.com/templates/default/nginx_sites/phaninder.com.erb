# caching options
proxy_cache_path  /var/cache/sites_nginx levels=1:2 keys_zone=my-cache:8m max_size=1000m inactive=600m;
proxy_temp_path   /var/cache/tmp; 

proxy_cache my-cache;
proxy_cache_valid  200 302  60m;
proxy_cache_valid  404      1m;
# setting key doesn't not work for maintaince redirect
#proxy_cache_key sfs$request_uri$scheme;
proxy_redirect off;
proxy_http_version 1.1;

proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header Connection        "";

server {
  listen 80;
  listen [::]:80 default_server ipv6only=on;
 
  # Timeout for closing keep-alive connections.
  keepalive_timeout 10;

  server_name <%= node[:myblog][:main][:hostname] %> <% node[:myblog][:main][:aliases].each do |a| %> <%= a %> <% end %>;
  
  # Max upload size.
  # client_max_body_size 16M;
 
  # Access and error log files.
  access_log /var/log/nginx/<%= node[:myblog][:main][:hostname] %>-access.log;
  error_log /var/log/nginx/<%= node[:myblog][:main][:hostname] %>-error.log;

  # The reason we have set up individual loactions is due to the fact
  # that proxy_pass cannot be used in location regex, if and few nginx control statements
  <% node[:myblog][:static_route_main].each do |file_name| %>
    location /<%= file_name %> {
      proxy_pass http://<%= node[:myblog][:static][:hostname] %>/<%= file_name %>;
      access_log off;
      expires max;
    }
  <% end %>

  location / {
    # Reverse proxy
    proxy_pass <%= node[:myblog][:main][:proxy_pass] %>;

    # take care of errors
    proxy_intercept_errors on;
    error_page 500 502 504 403 404 =503 @maintenance;
  }

  location @maintenance {
    proxy_pass <%= node[:myblog][:secondary][:proxy_pass] %>;
    #rewrite ^/(.*) http://secondary.phaninder.com/$1 permanent;
  }
}